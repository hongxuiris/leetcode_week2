
# 475. Heaters

class Solution:
    def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        heaters.sort()
        # heaters = [float('-inf')] + heaters + [float('inf')]
        res, n = 0, len(heaters) - 1
        for house in houses:
            left, right = 0, n
            while left + 1 < right:
                mid = (left + right) // 2
                if heaters[mid] <= house: left = mid 
                else: right = mid
            res = max(res, min(abs(heaters[left] - house), abs(heaters[right] - house)))
            
        return res
        



# Leetcode 475. Heaters
# Similar to Leetcode 35. Search Insert Position
# Similar to Leetcode 744. Find Smallest Letter Greater Than Target
# Difficulty: Easy

"""
Winter is coming! Your first job during the contest is to design a standard heater with fixed warm 
radius to warm all the houses.

Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of 
heaters so that all houses could be covered by those heaters.

So, your input will be the positions of houses and heaters seperately, and your expected output will 
be the minimum radius standard of heaters.

Note:

Numbers of houses and heaters you are given are non-negative and will not exceed 25000.
Positions of houses and heaters you are given are non-negative and will not exceed 10^9.
As long as a house is in the heaters' warm radius range, it can be warmed.
All the heaters follow your radius standard and the warm radius will the same.
 

Example 1:

Input: [1,2,3],[2]
Output: 1
Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all 
the houses can be warmed.
 

Example 2:

Input: [1,2,3,4],[1,4]
Output: 1
Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all 
the houses can be warmed.
"""

# Binary Search
# Time: O(logn)
# Space: O(1)

# Template 1:
# while loop:        left + 1 < right
# exit condition:    left + 1 == right
# update rule:       left = mid
#                    right = mid
# check point:       left, right
class Solution:
    def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        heaters.sort()
        heaters = [float('-inf')] + heaters + [float('inf')]
        res, n = 0, len(heaters) - 1
        for house in houses:
            left, right = 0, n
            while left + 1 < right:
                mid = left + (right - left) // 2
                if heaters[mid] <= house: left = mid
                else: right = mid
            
            res = max(res, min(abs(heaters[left] - house), abs(heaters[right] - house)))
        return res


# Template 2: 
# while loop:        left < right
# exit condition:    left == right
# update rule:       left = mid + 1
#                    right = mid
# check point:       left, left - 1
class Solution:
    def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        heaters.sort()
        heaters = [float('-inf')] + heaters + [float('inf')]
        res, n = 0, len(heaters) - 1
        for house in houses:
            left, right = 0, n
            while left < right:
                mid = left + (right - left) // 2
                if heaters[mid] <= house: left = mid + 1
                else: right = mid
            
            res = max(res, min(abs(heaters[left] - house), abs(heaters[left - 1] - house)))
        return res


# Template 3: 
# while loop:        left <= right
# exit condition:    left - 1 == right
# update rule:       left = mid + 1
#                    right = mid - 1
# check point:       left, right
class Solution:
    def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        heaters.sort()
        heaters = [float('-inf')] + heaters + [float('inf')]
        res, n = 0, len(heaters) - 1
        for house in houses:
            left, right = 0, n
            while left <= right:
                mid = left + (right - left) // 2
                if heaters[mid] <= house: left = mid + 1
                else: right = mid - 1
            
            res = max(res, min(abs(heaters[left] - house), abs(heaters[right] - house)))
        return res


# Built-in function: bisect.bisect_left or bisect.bisect
class Solution:
    def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        heaters.sort()
        heaters = [float('-inf')] + heaters + [float('inf')]
        res = 0
        for house in houses:
            # pos = bisect.bisect_left(heaters, house)
            pos = bisect.bisect(heaters, house)
            res = max(res, min(abs(heaters[pos] - house), abs(heaters[pos - 1] - house)))
        return res
