# 441. Arranging Coins

# You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.
# Given n, find the total number of full staircase rows that can be formed.
# n is a non-negative integer and fits within the range of a 32-bit signed integer.

# Example 1:
# n = 5
# The coins can form the following rows:
# ¤
# ¤ ¤
# ¤ ¤

# Because the 3rd row is incomplete, we return 2.


# Example 2:
# n = 8
# The coins can form the following rows:
# ¤
# ¤ ¤
# ¤ ¤ ¤
# ¤ ¤
# Because the 4th row is incomplete, we return 3.

# template 1
class Solution:
    def arrangeCoins(self, n: int) -> int:
        left, right = 0, n
        while left + 1 < right:
            mid = (left + right) // 2
            if mid * (mid + 1) // 2 == n : return mid
            elif mid * (mid + 1) // 2 < n:
                left = mid
            else: right = mid
        if right * (right + 1) // 2 == n: return right
        else: return left

        
        
# template 2
class Solution:
    def arrangeCoins(self, n: int) -> int:
        left, right = 0, n
        while left < right:
            mid = (left + right) // 2
            if mid * (mid + 1) // 2 == n: return mid
            elif mid * (mid + 1) // 2 < n:
                left = mid + 1
            else: 
                right = mid
        if left * (left + 1) // 2 == n: return left
        return left - 1
 
 
# template 3
class Solution:
    def arrangeCoins(self, n: int) -> int:
        left, right = 0, n
        while left <= right:
            mid = (left + right) // 2
            if mid * (mid + 1) // 2 == n: return mid
            elif mid * (mid + 1) //2 < n: left = mid + 1
            else: right = mid - 1
        return right
        



# Hong's answer
class Solution:
    def arrangeCoins(self, n: int) -> int:
        left, right = 0, n
        while left < right:
            mid = (left + right) // 2
            if mid * (mid + 1) // 2 <= n and (mid + 1) * (mid + 2) // 2 > n: return mid
            elif (mid + 1) * (mid + 2) // 2 <= n: left = mid + 1
            else: right = mid
        return left

