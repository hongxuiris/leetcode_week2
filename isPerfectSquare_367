
# 367. Valid Perfect Square
# Given a positive integer num, write a function which returns True if num is a perfect square else False.

# Note: Do not use any built-in library function such as sqrt.
# Example 1:
# Input: 16
# Output: true

# Example 2:
# Input: 14
# Output: false


# time O(logn)
# space O(1)


# template 1
class Solution:
    def isPerfectSquare(self, num: int) -> bool:
        left, right = 1, num
        while left + 1 < right:
            mid = (left + right) // 2
            square = mid ** 2
            if square == num: return True
            elif square < num: left = mid
            else: right = mid
        return left ** 2 == num or right ** 2 == num





# template 2
class Solution:
    def isPerfectSquare(self, num: int) -> bool:
        left, right = 1, num
        while left < right:
            mid = (left + right) // 2
            square = mid ** 2
            if square == num: return True
            elif square < num: left = mid + 1
            else: right = mid
        return left ** 2 == num



# template 3
class Solution:
    def isPerfectSquare(self, num: int) -> bool:
        left, right = 1, num  # num // 2 + 1
        while left <= right:
            mid = (left + right) // 2
            square = mid ** 2
            if square == num: return True
            elif square < num:
                left = mid + 1
            else:
                right = mid - 1
        return False
        
        
        
        
# 
class Solution:
    def isPerfectSquare(self, num: int) -> bool:
        x = num
        while x ** 2 > num:
            x = (x + num // x) // 2
        return x ** 2 == num 

