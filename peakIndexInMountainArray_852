# 852. Peak Index in a Mountain Array
# Let's call an array A a mountain if the following properties hold:

# A.length >= 3
# There exists some 0 < i < A.length - 1 such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1]
# Given an array that is definitely a mountain, return any i such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > 
# ... > A[A.length - 1].

# Note:
# 3 <= A.length <= 10000
# 0 <= A[i] <= 10^6
# A is a mountain, as defined above.



# template 1
class Solution:
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        left, right = 0, len(A) - 1
        while left + 1 < right:
            mid = (left + right) // 2
            if A[mid] > A[mid + 1] and A[mid] > A[mid - 1]:
                return mid
            elif A[mid] < A[mid + 1]  and A[mid] > A[mid - 1]:
                left = mid
            else:
                right = mid
        if A[left] > A[left + 1] and A[left] > A[left - 1]:
            return left
        if A[right] > A[right + 1] and A[right] > A[right - 1]:
            return right
  
# solution  
class Solution:
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        left, right = 0, len(A) - 1
        while left + 1 < right:
            mid = (left + right) // 2
            if A[mid - 1] < A[mid] > A[mid + 1]: return mid
            elif A[mid] < A[mid + 1]: left = mid
            else: right = mid
        return left if A[left] > A[right] else right


# template 2
class Solution:
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        left, right = 0, len(A) - 1
        while left < right:
            mid = (left + right) // 2
            if A[mid] > A[mid + 1] and A[mid] > A[mid - 1]:
                return mid
            elif A[mid] < A[mid + 1] and A[mid] > A[mid - 1]:
                left = mid + 1
            else: 
                right = mid
        return left
        

# solution
class Solution:
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        left, right = 0, len(A) - 1
        while left < right:
            mid = left  + (right - left) // 2
            if A[mid - 1] < A[mid] > A[mid + 1]: return mid
            elif A[mid] < A[mid + 1]: left = mid + 1
            else: right = mid
        return left




# template 3
class Solution:
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        left, right = 0, len(A) - 1
        while left <= right:
            mid = (left + right) // 2
            if A[mid] > A[mid + 1] and A[mid] > A[mid - 1]:
                return mid
            elif A[mid] < A[mid + 1] and A[mid] > A[mid - 1]:
                left = mid + 1
            else:
                right = mid - 1
                
        

# solution
class Solution:
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        left, right = 0, len(A) - 1
        while left <= right:
            mid = left  + (right - left) // 2
            if A[mid - 1] < A[mid] > A[mid + 1]: return mid
            elif A[mid] < A[mid + 1]: left = mid + 1
            else: right = mid - 1






