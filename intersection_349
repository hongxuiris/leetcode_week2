
# 349. Intersection of Two Arrays

# Given two arrays, write a function to compute their intersection.

# Example 1:
# Input: nums1 = [1,2,2,1], nums2 = [2,2]
# Output: [2]

# Example 2:
# Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
# Output: [9,4]

# Note:
# Each element in the result must be unique.
# The result can be in any order.


# solution, time complexity O(min(m,n))log(max(m,n))
# space complexity O(min(m,n))
class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        if not nums1 or not nums2: return []
        def binary_search(nums, target):
            if not nums: return False
            left, right = 0, len(nums) - 1
            while left <= right:
                mid = (left + right) // 2
                if nums[mid] == target:
                    return True
                elif nums[mid] < target:
                    left = mid + 1
                else:
                    right = mid - 1
            return False
        
        if len(set(nums2)) < len(set(nums1)): return self.intersection(nums2, nums1)
        
        res = []
        nums2.sort()
        Snums1 = set(nums1)  # O(n)

        for num in Snums1:
            if binary_search(nums2, num):
                res.append(num)
        return res
            


class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        if not nums1 or not nums2: return []
        set_nums1, set_nums2 = set(nums1), set(nums2)
        res = []
        for num in set_nums1:
            if num in set_nums2:
                res.append(num)
        return res
